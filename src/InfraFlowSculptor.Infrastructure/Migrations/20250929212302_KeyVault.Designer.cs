// <auto-generated />
using System;
using System.Collections.Generic;
using InfraFlowSculptor.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfraFlowSculptor.Infrastructure.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20250929212302_KeyVault")]
    partial class KeyVault
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InfraFlowSculptor.Domain.Common.BaseModels.AzureResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AzureResourceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<Guid>("ResourceGroupId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "InfraFlowSculptor.Domain.Common.BaseModels.AzureResource.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AzureResourceId");

                    b.HasIndex("ResourceGroupId");

                    b.ToTable("AzureResource", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.InfrastructureConfigAggregate.InfrastructureConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "InfraFlowSculptor.Domain.InfrastructureConfigAggregate.InfrastructureConfig.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("InfrastructureConfig", (string)null);
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.ResourceGroupAggregate.ResourceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InfraConfigId")
                        .HasColumnType("uuid");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "InfraFlowSculptor.Domain.ResourceGroupAggregate.ResourceGroup.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("InfraConfigId");

                    b.ToTable("ResourceGroup", (string)null);
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "InfraFlowSculptor.Domain.UserAggregate.User.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.KeyVaultAggregate.KeyVault", b =>
                {
                    b.HasBaseType("InfraFlowSculptor.Domain.Common.BaseModels.AzureResource");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("KeyVaults", (string)null);
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.Common.BaseModels.AzureResource", b =>
                {
                    b.HasOne("InfraFlowSculptor.Domain.Common.BaseModels.AzureResource", null)
                        .WithMany("Dependencies")
                        .HasForeignKey("AzureResourceId");

                    b.HasOne("InfraFlowSculptor.Domain.ResourceGroupAggregate.ResourceGroup", "ResourceGroup")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceGroup");
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.ResourceGroupAggregate.ResourceGroup", b =>
                {
                    b.HasOne("InfraFlowSculptor.Domain.InfrastructureConfigAggregate.InfrastructureConfig", "InfraConfig")
                        .WithMany("ResourceGroups")
                        .HasForeignKey("InfraConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfraConfig");
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.KeyVaultAggregate.KeyVault", b =>
                {
                    b.HasOne("InfraFlowSculptor.Domain.Common.BaseModels.AzureResource", null)
                        .WithOne()
                        .HasForeignKey("InfraFlowSculptor.Domain.KeyVaultAggregate.KeyVault", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.Common.BaseModels.AzureResource", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.InfrastructureConfigAggregate.InfrastructureConfig", b =>
                {
                    b.Navigation("ResourceGroups");
                });

            modelBuilder.Entity("InfraFlowSculptor.Domain.ResourceGroupAggregate.ResourceGroup", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
